#include <bits/stdc++.h> 
 typedef long long ll;
    void mergeF(ll a[], ll s, ll e, ll temp[], ll &ans) {
        if (s >= e)
        return;
        int mid = s + (e - s) / 2;
        int i = s, j = mid + 1, k = s;
        while (i <= mid and j <= e) {
            if (a[i] > a[j]) {
                //[i, mid] are inversions
                ans += mid - i + 1;
                temp[k++] = a[j++];
            }
            else {
                temp[k++] = a[i++];
            }
        }
        // 4 5 6, 1 2 5
        while (i <= mid)
        temp[k++] = a[i++];
        while (j <= e)
        temp[k++] = a[j++];
        //make a from [s, e] sorted
        for (int i = s; i <= e; ++i)
        a[i] = temp[i];
    }
    void mergeSort(long long a[], ll s, ll e, ll temp[], ll &ans) {
        if (s >= e)
        return;
        int mid = s + (e - s) / 2;
        mergeSort(a, s, mid, temp, ans);
        mergeSort(a, mid + 1, e, temp, ans);
        mergeF(a, s, e, temp, ans);
    }
long long getInversions(long long *arr, int n){
     long long ans = 0;
        long long temp[n];
        mergeSort(arr, 0, n - 1, temp, ans);
        return ans;
}
