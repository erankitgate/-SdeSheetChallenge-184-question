#include<bits/stdc++.h>
int dp[1000][1000];
    //Function to return max value that can be put in knapsack of capacity W.
    int solvedp(vector<int> & wt,vector<int> & val,int w,int n)
    { 
        if(w==0 or n==-1)
       return 0;
       if(dp[n][w]!=-1) return dp[n][w];
       
       if(wt[n]>w)
       {
           return dp[n][w]=solvedp(wt,val,w,n-1);
       }
       int a,b;
       a=val[n]+solvedp(wt,val,w-wt[n],n-1);
       b=solvedp(wt,val,w,n-1);
       return dp[n][w]=max(a,b);
    
    }

int maxProfit(vector<int> &val, vector<int> &wt, int n, int w)
{
	   dp[n][w];
       memset(dp,-1,sizeof(dp));
        return solvedp(wt,val,w,n-1);
}
